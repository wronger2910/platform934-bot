import logging
import random
import re
import os
import json
from aiogram import Bot, Dispatcher, executor, types
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- Google Sheets Setup ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

creds = ServiceAccountCredentials.from_json_keyfile_dict(
    json.loads(os.environ["GOOGLE_CREDENTIALS_JSON"]), scope
)

client = gspread.authorize(creds)
sheet = client.open_by_key("1TIGUiDIbCmHkqX3MUm4tqhNrKH1RQHkX-zD7ZvAWaE0").worksheet("–õ–∏—Å—Ç1")

# --- Telegram Bot Setup ---
API_TOKEN = os.getenv("BOT_TOKEN", "–¢–í–û–ô_–¢–û–ö–ï–ù_–ó–î–ï–°–¨")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

prizes = [
    "ü™Ñ –°—É–≤–µ–Ω–∏—Ä—ã –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏",
    "üßô‚Äç‚ôÇÔ∏è 2 –∞–∫—Ç—ë—Ä–∞ –≤ –∫–≤–µ—Å—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
    "ü™Ñ –°–∫–∏–¥–∫–∞ –Ω–∞ –∫–≤–µ—Å—Ç 30%",
    "üéÅ –°–∫–∏–¥–∫–∞ –Ω–∞ –∫–≤–µ—Å—Ç 50%",
    "üåÄ –í—Ç–æ—Ä–æ–π –∫–≤–µ—Å—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
    "üéâ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è 5000‚ÇΩ",
    "üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ –≤ –∫–≤–µ—Å—Ç–µ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
    "üèÜ üü° –°–£–ü–ï–† –ü–†–ò–ó: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–≤–µ—Å—Ç!"
]

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    args = message.get_args()
    user_data[user_id] = {
        'username': message.from_user.username,
        'source': args if args else '–Ω–µ —É–∫–∞–∑–∞–Ω'
    }

    await message.answer(
        "üßô‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —é–Ω—ã–π –º–∞–≥–∏—Å—Ç—Ä!\n\n"
        "–Ø ‚Äî –í–æ–ª—à–µ–±–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫ —Ü–µ–Ω—Ç—Ä–∞ –∫–≤–µ—Å—Ç–æ–≤ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ ¬´–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ 9¬æ¬ª. "
        "–ü–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –í–∞—Å –≤ –Ω–∞—à –≤–æ–ª—à–µ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π... ‚ú®\n\n"
        "üìú –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç, –æ –¥–æ—Å—Ç–æ–π–Ω—ã–π –º–∞–≥?"
    )

@dp.message_handler(lambda message: user_data.get(message.from_user.id, {}).get('name') is None)
async def get_name(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]['name'] = message.text.strip()
    await message.answer(
        "üóì –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ê –∫–æ–≥–¥–∞ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤–∏–∑–∏—Ç –∫ –Ω–∞–º –≤ –•–æ–≥—Å–º–∏–¥? üè∞\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì**, –Ω–∞–ø—Ä–∏–º–µ—Ä: 04.08.2025"
    )

@dp.message_handler(lambda message: user_data.get(message.from_user.id, {}).get('visit_date') is None)
async def get_date(message: types.Message):
    user_id = message.from_user.id
    date_input = message.text.strip()
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_input):
        await message.answer("üï∞ –û–π-–æ–π, –º–æ–∏ –ø–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç...\n"
                             "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ **–î–î.–ú–ú.–ì–ì–ì–ì**, –Ω–∞–ø—Ä–∏–º–µ—Ä: 04.08.2025")
        return
    user_data[user_id]['visit_date'] = date_input
    await message.answer(
        "üìû –ü–æ—Å–ª–µ–¥–Ω–∏–π —à—Ç—Ä–∏—Ö ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –≤–æ–ª—à–µ–±–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏, "
        "–≤ —Ñ–æ—Ä–º–∞—Ç–µ **+7XXXXXXXXXX**"
    )

@dp.message_handler(lambda message: user_data.get(message.from_user.id, {}).get('phone') is None)
async def get_phone(message: types.Message):
    user_id = message.from_user.id
    phone_input = message.text.strip()
    if not re.match(r"^\+7\d{10}$", phone_input):
        await message.answer("üßô‚Äç‚ôÇÔ∏è –í–∞—à –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ **+7XXXXXXXXXX**.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    user_data[user_id]['phone'] = phone_input
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
    await message.answer("‚ú® –í—Å–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ª—à–µ–±–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ üéÅ", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
async def give_prize(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_data:
        user_data[user_id] = {}

    if 'prize' in user_data[user_id]:
        return

    prize = random.choice(prizes)
    user_data[user_id]['prize'] = prize

    remove_kb = types.ReplyKeyboardRemove()
    link_kb = types.InlineKeyboardMarkup()
    link_kb.add(types.InlineKeyboardButton("üéü –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ", url="https://platform934.ru/"))

    await message.answer(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –ø–æ–ª—É—á–∏–ª–∏:\n\n{prize}\n\n"
        "üìå –ü–æ–¥–∞—Ä–∫–æ–º –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ **12 –º–µ—Å—è—Ü–µ–≤**. "
        "–ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ. ‚ú®",
        reply_markup=remove_kb
    )

    await message.answer("ü™Ñ –ì–æ—Ç–æ–≤—ã –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –Ω–∞ –ü–ª–∞—Ç—Ñ–æ—Ä–º—É 9¬æ?\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=link_kb)

    save_to_google_sheet(user_id)

def save_to_google_sheet(user_id):
    try:
        data = user_data[user_id]
        sheet.append_row([
            data.get('name', ''),
            data.get('visit_date', ''),
            data.get('phone', ''),
            data.get('prize', ''),
            str(user_id),
            data.get('username', ''),
            data.get('source', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        ])
        print(f"[‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É] {data.get('name')} | –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source')}")
    except Exception as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É] {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
